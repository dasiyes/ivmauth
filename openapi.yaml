openapi: 3.0.0
info:
  version: 1.0.0
  title: Ivmanto Auth
  description: |
    Authentication and authorization service for Ivmanto domains.
  termsOfService: https://www.github.com/dasiyes/tos
  contact:
    name: Ivmanto
    url: https://www.github.com/dasiyes/support
    email: support@ivmanto.dev
  license:
    name: MIT
servers:
  - url: https://accounts.ivmanto.com/{base_path}
    description: production server address
    variables:
      base_path:
        default: app
  - url: https://core.dev
    description: development server address
paths:
  /auth:
    post:
      summary: receives requests for authentication
      description: |-
        POST requests sent to this endpint will expect to fall into one of the OAuth2
        grant flows. In case of a successful authentication an **Access token** will be sent in the response.
      operationId: authenticateRequest
      requestBody:
        description: The authentication request body should follow on the requirements for OAuth2 standard [RFC6749](http://www.rfc-editor.org/info/rfc6749)
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequestBody"
            examples:
              OneTapSignIn:
                summary: Ivmanto's front-end auth request for OneTap sign-in
                value:
                  grant_type: id_token
                  idToken: ABC...x.DEF...x.XYZ...x
                  scope:
                    - read, write
              RegisteredUser:
                summary: An user of the Ivmanto's web site
                value:
                  grant_type: password
                  email: someone@example.com
                  password: password
                  scope:
                    - read
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AuthRequestFormBody"
      security:
        - basic: []
      
      responses:
        '200':
          description: authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
              example: {
                "access_token": "xxx.xxx.xxx",
                "token_type": "Bearer",
                "expires_in": 3600,
                "refresh_token": "yyy.yyy.yyy"
                }

        default:
          $ref: '#/components/responses/default'
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '415':
          $ref: "#/components/responses/UnsupportedMediaType"

components:

  schemas:

    # Authentication Request Body of a post request
    AuthRequestBody:
      type: object
      description: body json object for requesting authentication
      required:
        - grant_type
        - scopes
      additionalProperties: false
      properties:
        grant_type:
          type: string
          description: defines the Authrozatin Grant Type
          maxLength: 30
          pattern: '^[a-z0-9._]$'
        scopes:
          type: array
          description: identifies the authroization scope
          items:
            type: string
            maxLength: 30
            pattern: '^[0-9a-z._]$'
          maxItems: 10
        IDToken:
          type: string
          description: Required only when the grant_type is set to id_token
          pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
          maxLength: 4000
        IDProvider:
          type: string
          description: Required only when the grant_type is set to id_token
          maxLength: 32
          pattern: '^[0-9A-Za-z-_.]$'
        email:
          $ref: "#/components/schemas/EmailAddress"
        password:
          type: string
          description: Required only for grant_type - resource owner password
          pattern: '^[-!$%^&*()_+|~=`{}\[\]:";<>?,.\/a-zA-Z0-9]$'
          maxLength: 65
        nonce:
          type: string
          description: session token to validate the IDToken returned by the Authorization server
          maxLength: 32
          pattern: '^[A-Za-z0-9._+/=&]$'
        asrCID:
          type: string
          description: this is the OAUth2 clientID as value returned by the authorization server along with the IDToken response
          maxLength: 100
          pattern: '^[-A-Za-z0-9.]$'

    # Authentication Request Form Body [NOT RECOMMENDED] content type x-www-form-urlencoded
    AuthRequestFormBody:
      type: string
      description: Client authentication according to [RFC6749] section 2.3.1
      pattern: '^[-A-Za-z0-9_.+/=&]$'
      maxLength: 10000

    # Access Token to return as response to successfully authenticated requests
    AccessToken:
      type: object
      description: JSON object containing access and refresh tokens to be used for authroizing future requests within the scopes and validity time frame.
      additionalProperties: false
      properties:
        access_token:
          type: string
          description: JWT token issued on successful authentication
          maxLength: 4000
          pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
        token_type: 
          type: string
          description: The type of the AccessToken. So far only "Bearer" supported
          maxLength: 10
          pattern: '^[A-Za-z]$'
        expires_in:
          type: integer
          description: The expiration time in seconds
          minimum: 0
          maximum: 7200
          format: int32
        refresh_token:
          type: string
          description: JWT token issued on successful authentication along with the AccessToken
          maxLength: 4000
          pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
        scopes:
          $ref: "#/components/schemas/Scopes"

    # Error Model - for responses with Error
    ErrorModel:
      type: object
      description: Object structure for Error resonses
      additionalProperties: false
      required:
        - errorCode
        - error
      properties:
        errorCode:
          type: integer
          description: Error code from the internal list of errors
          minimum: 0
          maximum: 10000
          format: int32
        error:
          type: string
          description: Short name of the error
          maxLength: 50
          pattern: '^[0-9A-Za-z ]$'
        message:
          type: string
          description: additional error information
          maxLength: 32
          pattern: '^[0-9A-Za-z ]$'

    # UserProfile is a object to hold the user information
    UserProfile:
      type: object
      description: |-2
        This is the schema of the object returned as response on GET in /users/{userId}
      additionalProperties: false
      required:
        - email
        - scopes
      properties:
        email:
          $ref: '#/components/schemas/EmailAddress'
        picture_url:
          $ref: '#/components/schemas/PictureUrl'
        name:
          $ref: '#/components/schemas/Username'
        scopes:
          $ref: "#/components/schemas/Scopes"

    # picture url for users avatar
    PictureUrl:
      type: string
      description: the profile avatar picture from the net
      maxLength: 150
      pattern: '^((?:https?:\/\/)?[^./]+(?:\.[^./]+)+(?:\/.*)?)$'
    
    # email address
    EmailAddress:
      type: string
      example: someone@example.com
      # the length is according to the standard
      maxLength: 320
      pattern: '^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'

    # username
    Username:
      type: string
      description: to be used as users' identifier. In Ivmantos realm is the "#/components/schemas/EmailAddress"
      maxLength: 320
      pattern: '^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'      

    # Scopes to authorize permission
    Scopes:
      type: array
      items:
        type: string
        maxLength: 32
        pattern: '^[a-z0-9:._]$'
      maxItems: 10

  responses:
    # Default error 
    default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

    # 401 Unauthorized
    Unauthorized:
      description: Unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

    # 401 Unauthorized
    Forbidden:
      description: Forbidden access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
  
    # 404 NotFound
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

    # 415 UNSUPPORTED MEDIA TYPE
    UnsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

  securitySchemes:
    # Only used for client authorization of http requests to /auth
    basic:
      type: http
      scheme: Basic
      description: |-
        HTTP Basic authentication scheme to authenticate the client
    
    # The Ivmanto's implementation of OAuth2
    ivmanto_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://github.com/dasiyes/auth
          scopes:
            write:ivmanto: editor permissions at ivmanto
            read:ivmanto: read only permissions
        
        password:
          tokenUrl: https://github.com/dasiyes/auth/token
          refreshUrl: https://github.com/dasiyes/auth/token/refresh
          scopes:
            write:ivmanto: editor permissions at ivmanto
            read:ivmanto: read only permissions
        
        clientCredentials:
          tokenUrl: https://github.com/dasiyes/auth/token
          refreshUrl: https://github.com/dasiyes/auth/token/refresh
          scopes:
            type: string

        authorizationCode:
          authorizationUrl: https://github.com/dasiyes/auth
          tokenUrl: https://github.com/dasiyes/auth/token
          scopes:
            type: string
    
    # OpenIDConnect discovery endpoint
    ivmanto_oidc:
      type: openIdConnect
      openIdConnectUrl: https://github.com/dasiyes/auth/oidc

security:
  - basic: []
  - ivmanto_auth:
    - write:ivmanto
    - read:ivmanto
  - ivmanto_oidc:
    - write:ivmanto
    - read:ivmanto
