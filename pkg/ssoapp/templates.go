package ssoapp

import (
	"html/template"
	"path/filepath"
	"time"

	"github.com/dasiyes/ivmauth/pkg/forms"
	"github.com/dasiyes/ivmauth/pkg/models"
)

type TemplateData struct {

	// CSRFToken is generated by the nosurf package's Token method in addDefaultData
	CSRFToken string

	// CurrentYaer is used in the UI footer for the copyright year
	CurrentYear int

	// Flash - to be implemented in UI animated part
	Flash string

	// The Formsused in the Login and Register UI pages
	Form *forms.Form

	// IsAuthenticated - indicator if the user/session is authenticated
	IsAuthenticated bool

	// User - the account details for a system user
	User *models.User

	// the service version value that will be shown in UI footer
	Version string

	// The ClientID value that will be sent in the cookie `c` and will be used to identify the calling application
	ClientID string

	// The title of the message - used in message template
	MsgTitle string

	// The message - used in message template
	Message string

	// The URL - for activate user account message
	URL string

	// The label of the URL above
	UrlLabel string

	// GSigninURI (i.e. https://example.com/path) where the Google Sign will redirect the IDToken to
	GSigninURI string
}

func humanDate(t time.Time) string {
	if t.IsZero() {
		return ""
	}
	return t.UTC().Format("02 Jan 2006 at 15:04")
}

var functions = template.FuncMap{
	"humanDate": humanDate,
}

// NewTemplateCache cretes a new cache instane of the template files at the initiation of the service
func NewTemplateCache(dir string) (map[string]*template.Template, error) {
	cache := map[string]*template.Template{}

	pages, err := filepath.Glob(filepath.Join(dir, "*.page.tmpl"))
	if err != nil {
		return nil, err
	}

	for _, page := range pages {
		name := filepath.Base(page)

		ts, err := template.New(name).Funcs(functions).ParseFiles(page)
		if err != nil {
			return nil, err
		}

		ts, err = ts.ParseGlob(filepath.Join(dir, "*.layout.tmpl"))
		if err != nil {
			return nil, err
		}

		ts, err = ts.ParseGlob(filepath.Join(dir, "*.partial.tmpl"))
		if err != nil {
			return nil, err
		}

		cache[name] = ts
	}

	return cache, nil
}
